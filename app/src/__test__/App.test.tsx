import "@testing-library/jest-dom";
import { render, screen } from "@testing-library/react";
import { axe, toHaveNoViolations } from "jest-axe";
import * as renderer from "react-test-renderer";

import App from "../App";
import { SideBar, Header } from "../components/layout";
import ChatPage from "../pages/ChatPage";
import { ErrorBoundary } from "../components";
import { LABELS } from "../constants/language";

const ErrorPage = () => {
  throw new Error();
};

describe("Test APP Snapshot", function () {
  it("Matches snapshot", () => {
    const app = renderer.create(<App />).toJSON();
    expect(app).toMatchSnapshot();
  });
});

describe("Test App Accessibility", function () {
  it("Should render with Standard Accessibility", async function () {
    expect.extend(toHaveNoViolations);
    const { container } = render(<App />);
    expect(await axe(container)).toHaveNoViolations();
  });
});

describe("Test App Semantic", function () {
  test("Should render app with Header,Main and Footer", () => {
    const testRenderer = renderer.create(<App />);
    const testInstance = testRenderer.root;
    expect(testInstance.findByType(Header));
    expect(testInstance.findByType(SideBar));
    expect(testInstance.findByType(ChatPage));
  });
});

describe("<ErrorBoundary>", () => {
  it("displays error message on error generated by child", () => {
    render(
      <ErrorBoundary>
        <ErrorPage />
      </ErrorBoundary>
    );
    expect(screen.getByRole("heading")).toHaveTextContent(LABELS.ERROR_TEXT);
  });
  it("should not displays error message on valid child", () => {
    render(
      <ErrorBoundary>
        <h1>Hello</h1>
      </ErrorBoundary>
    );
    expect(screen.getByRole("heading")).toHaveTextContent("Hello");
  });
});
